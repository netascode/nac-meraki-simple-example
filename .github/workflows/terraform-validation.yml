# GitHub Actions Workflow for NAC Meraki Simple Example
# This workflow validates and tests the Terraform configuration

name: Terraform Validation and Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: '0 6 * * 1' # Weekly drift detection on Mondays at 6 AM

env:
  TF_VERSION: "1.9.0"
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_CLI_ARGS: "-no-color"

jobs:
  # Terraform validation job
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validation
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check=true -recursive

  # YAML validation job
  yaml-validation:
    name: YAML Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install YAML tools
        run: |
          pip install yamllint pyyaml

      - name: Validate YAML syntax
        run: |
          echo "Validating YAML syntax..."
          python -c "
          import yaml
          import sys
          import os
          
          yaml_files = []
          for root, dirs, files in os.walk('data'):
              for file in files:
                  if file.endswith(('.yaml', '.yml')):
                      yaml_files.append(os.path.join(root, file))
          
          for yaml_file in yaml_files:
              try:
                  with open(yaml_file, 'r') as f:
                      yaml.safe_load(f)
                  print(f'✓ {yaml_file} - Valid YAML')
              except yaml.YAMLError as e:
                  print(f'✗ {yaml_file} - Invalid YAML: {e}')
                  sys.exit(1)
          "

      - name: Run yamllint
        run: |
          yamllint data/ -d "{extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}"

  # Documentation check job
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."
          if [ ! -f "README.md" ]; then
            echo "ERROR: README.md is missing!"
            exit 1
          fi
          
          if ! grep -q "MERAKI_API_KEY" README.md; then
            echo "WARNING: README.md doesn't mention MERAKI_API_KEY environment variable"
          fi
          
          echo "Documentation check passed"

  # Terraform lifecycle integration test
  terraform-lifecycle:
    name: Terraform Lifecycle Test
    runs-on: ubuntu-latest
    needs: [terraform-validate, yaml-validation]
    environment: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Terraform Init
        run: terraform init

      - name: Step 1 - Terraform Plan
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
        run: |
          echo "🔍 Step 1: Running Terraform Plan"
          terraform plan -out=tfplan
          echo "✅ Terraform plan completed successfully"

      - name: Generate Plan JSON
        run: terraform show -json tfplan > tfplan.json

      - name: Step 2 - Terraform Apply (Initial)
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
        run: |
          echo "🚀 Step 2: Running initial Terraform Apply"
          terraform apply -auto-approve tfplan
          echo "✅ Initial terraform apply completed successfully"

      - name: Step 3 - Terraform Apply (Idempotency Check)
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
        run: |
          echo "🔄 Step 3: Running Terraform Apply for idempotency check"
          terraform apply -auto-approve
          echo "✅ Idempotency check completed - no changes should have been made"

      - name: Step 4 - Terraform Destroy
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
        run: |
          echo "🧹 Step 4: Running Terraform Destroy to clean up resources"
          terraform destroy -auto-approve
          echo "✅ Terraform destroy completed successfully"
        # Always run destroy, even if previous steps fail
        if: always()

      - name: Upload Terraform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-lifecycle-artifacts
          path: |
            tfplan
            tfplan.json
            terraform.tfstate*
          retention-days: 7
        if: always()

      - name: Lifecycle Test Summary
        run: |
          echo "🎉 Terraform Lifecycle Test Complete!"
          echo "✅ Plan - Configuration validated"
          echo "✅ Apply - Resources created successfully"
          echo "✅ Idempotency - No unexpected changes"
          echo "✅ Destroy - Resources cleaned up"
        if: success()
