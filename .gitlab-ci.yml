# GitLab CI/CD Pipeline for NAC Meraki Simple Example
# This pipeline validates and tests the Terraform configuration

variables:
  TF_VERSION: "1.9.0"
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_CLI_ARGS: "-no-color"

stages:
  - validate
  - security
  - plan
  - test

# Cache Terraform providers and modules
cache:
  key: terraform-cache
  paths:
    - .terraform/
    - .terraform.lock.hcl

# Terraform validation stage
terraform_validate:
  stage: validate
  image: hashicorp/terraform:$TF_VERSION
  before_script:
    - terraform --version
    - terraform init -backend=false
  script:
    - terraform validate
    - terraform fmt -check=true -recursive
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Terraform plan with API validation
terraform_plan:
  stage: plan
  image: hashicorp/terraform:$TF_VERSION
  before_script:
    - terraform --version
    - terraform init
    - echo "Using Meraki API Key from CI/CD variable"
  script:
    - terraform plan -out=tfplan
    - terraform show -json tfplan > tfplan.json
  artifacts:
    name: terraform-plan
    paths:
      - tfplan
      - tfplan.json
    expire_in: 7 days
    reports:
      terraform: tfplan.json
  environment:
    name: validation
    action: prepare
  variables:
    # This will be populated from GitLab CI/CD variables
    MERAKI_API_KEY: $MERAKI_API_KEY
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# YAML validation and linting
yaml_validation:
  stage: test
  image: python:3.11-alpine
  before_script:
    - pip install yamllint pyyaml
  script:
    - echo "Validating YAML syntax..."
    - python -c "
      import yaml
      import sys
      import os
      
      yaml_files = []
      for root, dirs, files in os.walk('data'):
          for file in files:
              if file.endswith(('.yaml', '.yml')):
                  yaml_files.append(os.path.join(root, file))
      
      for yaml_file in yaml_files:
          try:
              with open(yaml_file, 'r') as f:
                  yaml.safe_load(f)
              print(f'✓ {yaml_file} - Valid YAML')
          except yaml.YAMLError as e:
              print(f'✗ {yaml_file} - Invalid YAML: {e}')
              sys.exit(1)
      "
    - echo "Running yamllint..."
    - yamllint data/ -d "{extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Configuration drift detection (optional)
drift_detection:
  stage: test
  image: hashicorp/terraform:$TF_VERSION
  before_script:
    - terraform init
  script:
    - echo "Checking for configuration drift..."
    - terraform plan -detailed-exitcode
    - |
      if [ $? -eq 2 ]; then
        echo "Configuration drift detected!"
        exit 1
      else
        echo "No configuration drift detected."
      fi
  environment:
    name: validation
    action: verify
  variables:
    MERAKI_API_KEY: $MERAKI_API_KEY
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  allow_failure: true

# Documentation check
docs_check:
  stage: test
  image: alpine:latest
  script:
    - echo "Checking documentation completeness..."
    - |
      if [ ! -f "README.md" ]; then
        echo "ERROR: README.md is missing!"
        exit 1
      fi
    - |
      if ! grep -q "MERAKI_API_KEY" README.md; then
        echo "WARNING: README.md doesn't mention MERAKI_API_KEY environment variable"
      fi
    - echo "Documentation check passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
